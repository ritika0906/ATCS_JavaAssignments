***************************************************************************JPA Program****************************************************************************************

  Employee.java
================

package com.ia.employeecrud;

import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class Employee1 {

	@Id
	private int empid;
	private String empname;
	private String empadd;
	private int empsal;
	
	public int getEmpid() {
		return empid;
	}
	
	public void setEmpid(int empid) {
		this.empid = empid;
	}
	public String getEmpname() {
		return empname;
	}
	public void setEmpname(String empname) {
		this.empname = empname;
	}
	public String getEmpadd() {
		return empadd;
	}
	public void setEmpadd(String empadd) {
		this.empadd = empadd;
	}
	public int getEmpsal() {
		return empsal;
	}
	public void setEmpsal(int empsal) {
		this.empsal = empsal;
	}
	
	public Employee1() {
		// TODO Auto-generated constructor stub
	}
	public Employee1(int empid, String empname, String empadd, int empsal) {
		super();
		this.empid = empid;
		this.empname = empname;
		this.empadd = empadd;
		this.empsal = empsal;
	}
	@Override
	public String toString() {
		return "Employee [empid=" + empid + ", empname=" + empname + ", empadd=" + empadd + ", empsal=" + empsal + "]";
	}
	
	
}

  Test.java
==============

package com.ia.employeecrud;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class Test {

	public static void main(String[] args) {
		
		EntityManagerFactory factory = Persistence.createEntityManagerFactory("ritika");
		EntityManager entity = factory.createEntityManager();
		
		//insertion
//		Employee1 emp = new Employee1(20,"radha","delhi",0000);
//		entity.getTransaction().begin();
//	    entity.persist(emp);
//	    entity.getTransaction().commit();
//		
		//fetch
		Employee1 emp=entity.find(Employee1.class, 10);
	    System.out.println(emp); 
	    
	    //update
//	    emp.setEmpname("ranu");
//	    emp.setEmpadd("sikar");
//       emp.setEmpsal(20000);
//	     	
//	    entity.getTransaction().begin();
//	    entity.merge(emp);
//	    entity.getTransaction().commit();
//	    
	    //delete
	    entity.getTransaction().begin();
	    entity.remove(emp);
	    entity.getTransaction().commit();
	    
	}
}


   persistence.xml
=====================

<?xml version="1.0" encoding="UTF-8"?>

<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
                      http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
  version="2.0">
  
	<persistence-unit name="ritika" transaction-type="RESOURCE_LOCAL">
	
		<provider>org.hibernate.ejb.HibernatePersistence</provider>
		<class>com.ia.employeecrud.Employee1</class>

		<properties>
		<!-- database properties -->
			<property name="javax.persistence.jdbc.url" value="jdbc:postgresql://localhost/ritika" />
			<property name="javax.persistence.jdbc.user" value="postgres" />
			<property name="javax.persistence.jdbc.password" value="ritikaSQL" />
			<property name="javax.persistence.jdbc.driver" value="org.postgresql.Driver" />
			
			<!-- hibernate properties -->
			<property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
			<property name="hibernate.hbm2ddl.auto" value="update"/> <!-- create/update  -->
			<property name="hibernate.show_sql" value="true"/>
		</properties>
		
	</persistence-unit>
	
</persistence>


  output
==========

Hibernate: select employee1x0_.empid as empid0_0_, employee1x0_.empadd as empadd0_0_, employee1x0_.empname as empname0_0_, employee1x0_.empsal as empsal0_0_ from Employee1 employee1x0_ where employee1x0_.empid=?
Employee [empid=10, empname=ranu, empadd=sikar, empsal=20000]
Hibernate: delete from Employee1 where empid=?


ritika=# select * from employee1;
 empid | empadd | empname | empsal
-------+--------+---------+--------
    20 | delhi  | radha   |  40000
(1 row)


***********************************************************************************JPQL Program*********************************************************************************

Student.java
=============

package com.jpql;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="Student1")
public class Student{
	@Id
	private int id;
	@Column(length=15)
	private String name;
	private String add;
	
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getAdd() {
		return add;
	}
	public void setAdd(String add) {
		this.add = add;
	}
	
	public Student() {
		// TODO Auto-generated constructor stub
	}
	public Student(int id, String name, String add) {
		super();
		this.id = id;
		this.name = name;
		this.add = add;
	}
	@Override
	public String toString() {
		return "Student [id=" + id + ", name=" + name + ", add=" + add + "]";
	}
		
}


Test.java
===========
package com.jpql;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;


public class Test {

	public static void main(String[] args) {
		
		EntityManagerFactory factory=Persistence.createEntityManagerFactory("jpqlex");
		
		EntityManager entity= factory.createEntityManager();
		
		entity.getTransaction().begin();
	    
//	     inserted
//	     Student e= new Student(100, "ritika", "sikar");
//          Student e1= new Student(101, "sita","jaipur");
//	    Student e2= new Student(102, "SATHYA","HYD");
//	    Student e3= new Student(103, "MAHESH", "delhi");
//		
//	        entity.persist(e);
//		entity.persist(e1);
//		entity.persist(e2);
//		entity.persist(e3);
//		
                 //fetch the data 
//		TypedQuery<Student> tq=entity.createQuery("select e from Student e", Student.class);
//		
//		List<Student> li=tq.getResultList();
//				
//		for(Student s:li) 
//		{
//			
//			System.out.println(s.getId());
//		    System.out.println(s.getName());
//			System.out.println(s.getAdd());
//			
//		 }
		//deetion of data
		Query result = entity.createQuery("delete from  Student where add='sikar'");
                result.executeUpdate();

		entity.getTransaction().commit();
		entity.close();
		factory.close();
}
}

persistence.xml
================

<?xml version="1.0" encoding="UTF-8"?>

<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
                      http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
  version="2.0">
  
	<persistence-unit name="jpqlex" transaction-type="RESOURCE_LOCAL">
	
		<provider>org.hibernate.ejb.HibernatePersistence</provider>
		<class>com.jpql.Student</class>
		
		<properties>
		<!-- database properties -->
		
			<property name="javax.persistence.jdbc.url" value="jdbc:postgresql://localhost/ritika" />
			<property name="javax.persistence.jdbc.user" value="postgres" />
			<property name="javax.persistence.jdbc.password" value="ritikaSQL" />
			<property name="javax.persistence.jdbc.driver" value="org.postgresql.Driver" />
			<!-- hibernate properties -->
			<property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
			<property name="hibernate.hbm2ddl.auto" value="update"/><!-- create/update  -->
			<property name="hibernate.show_sql" value="true"/>
		</properties>
		
	</persistence-unit>
	
</persistence>


   OUTPUT
 ==========

ritika=# select * from student1;
 id  |  add   |  name
-----+--------+--------
 101 | jaipur | sita
 102 | HYD    | SATHYA
 103 | delhi  | MAHESH
(3 rows)


**********************************************************************************JPA Layered architecture********************************************************************

com.pizzamanagement.model---> Pizza.java class
===============================================

package com.pizzamanagement.model;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name = "PizzaTable" )
public class Pizza {
	
	@Id
	private int pizzaNo;
	private String pizzaType;
	private int pizzaPrice;
	private String DeliveryAdd;
	
	//getters and setters
	public int getPizzaNo() {
		return pizzaNo;
	}
	public void setPizzaNo(int pizzaNo) {
		this.pizzaNo = pizzaNo;
	}
	public String getPizzaType() {
		return pizzaType;
	}
	public void setPizzaType(String pizzaType) {
		this.pizzaType = pizzaType;
	}
	public int getPizzaPrice() {
		return pizzaPrice;
	}
	public void setPizzaPrice(int pizzaPrice) {
		this.pizzaPrice = pizzaPrice;
	}
	public String getDeliveryAdd() {
		return DeliveryAdd;
	}
	public void setDeliveryAdd(String deliveryAdd) {
		DeliveryAdd = deliveryAdd;
	}
	
	//default constructor
	public Pizza() {
		// TODO Auto-generated constructor stub
	}
	
	//Parameterized constructor
	public Pizza(int pizzaNo, String pizzaType, int pizzaPrice, String deliveryAdd) {
		super();
		this.pizzaNo = pizzaNo;
		this.pizzaType = pizzaType;
		this.pizzaPrice = pizzaPrice;
		DeliveryAdd = deliveryAdd;
	}
	
	//toString() method
	@Override
	public String toString() {
		return "Pizza [pizzaNo=" + pizzaNo + ", pizzaType=" + pizzaType + ", pizzaPrice=" + pizzaPrice
				+ ", DeliveryAdd=" + DeliveryAdd + "]";
	}
}


com.pizzamanagement.service----> PizzaService interface
=========================================================

package com.pizzamanagement.service;

import com.pizzamanagement.model.Pizza;

public interface PizzaService 
{
	void addPizza(Pizza pizza);
	
	void updatePizza(Pizza pizza);
	
	void deletePizza(Pizza pizza);
	
	Pizza findPizzaByNo(int pizzaNo);
}

com.pizzamanagement.service----> PizzaServiceImpl class
========================================================
package com.pizzamanagement.service;

import com.pizzamanagement.Dao.PizzaDao;
import com.pizzamanagement.Dao.PizzaDaoImpl;
import com.pizzamanagement.model.Pizza;

public class PizzaServiceImpl implements PizzaService {                                            //implemntation of services added in PizzaSevice Interface

	private PizzaDao dao;                                                                      //dao object
	
	public PizzaServiceImpl()                                                                  //default PizzaServiceImpl constructor 
	{
		dao = new PizzaDaoImpl();	                                                   //initializing the dao object 
	}
	
	
	@Override
	public void addPizza(Pizza pizza) {
		dao.beginTransaction();
		dao.addPizza(pizza);
		dao.commitTransaction();
	}

	@Override
	public void updatePizza(Pizza pizza) {
		dao.beginTransaction();
		dao.updatePizza(pizza);
		dao.commitTransaction();
		
	}

	@Override
	public void deletePizza(Pizza pizza) {
		dao.beginTransaction();
		dao.deletePizza(pizza);
		dao.commitTransaction();
		
	}

	@Override
	public Pizza findPizzaByNo(int pizzaNo) {
		
		Pizza pizza = dao.getPizzaByNo(pizzaNo);
		return pizza;
		
	}

}

com.pizzamanagement.Dao----> PizzaDao Interface
===============================================

package com.pizzamanagement.Dao;

import com.pizzamanagement.model.Pizza;

public interface PizzaDao {
	
	Pizza getPizzaByNo(int pizzaNo);
	
	void addPizza(Pizza pizza);
	
	void updatePizza(Pizza pizza);
	
	void deletePizza(Pizza pizza);
	
	void beginTransaction();
	
	void commitTransaction();

}
com.pizzamanagement.Dao----> PizzaDaoImpl class
===============================================

package com.pizzamanagement.Dao;

import javax.persistence.EntityManager;
import com.pizzamanagement.model.Pizza;

public class PizzaDaoImpl implements PizzaDao {                                                    //implemntation of services added in PizzaDao Interface

	private EntityManager entityManager;                                                       //EntityManager OBJECT
	
	public PizzaDaoImpl() {                                                                    //default PizzaDaoImpl constructor 
		
		entityManager = JPAUtil.getEntityManager();		                          //initialize the entity object
	}
	
	@Override
	public Pizza getPizzaByNo(int pizzaNo) 
	{
		Pizza pizza = entityManager.find(Pizza.class, pizzaNo);
		return pizza;
	}

	@Override
	public void addPizza(Pizza pizza) {
		entityManager.persist(pizza);
		
	}

	@Override
	public void updatePizza(Pizza pizza) {
		entityManager.merge(pizza);
		
	}

	@Override
	public void deletePizza(Pizza pizza) {
		entityManager.remove(pizza);
		
	}

	@Override
	public void beginTransaction() {
		entityManager.getTransaction().begin();
		
	}

	@Override
	public void commitTransaction() {
		entityManager.getTransaction().commit();
	}

}

com.pizzamanagement.Dao----> JPAUtil class
===========================================

package com.pizzamanagement.Dao;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class JPAUtil {

	private static EntityManagerFactory factory;
	private static EntityManager entityManager;
	
	static {
		factory = Persistence.createEntityManagerFactory("jpaleyerd");
	}
	
	public static EntityManager getEntityManager() {
		if(entityManager==null || !entityManager.isOpen()) {
			entityManager = factory.createEntityManager();
		}
		return entityManager;
	}

}

com.pizzamanagement.Ui----> Test.java class
============================================

package com.pizzamanagement.Ui;

import com.pizzamanagement.model.Pizza;
import com.pizzamanagement.service.PizzaService;
import com.pizzamanagement.service.PizzaServiceImpl;

public class Test {

	public static void main(String[] args) {
		
		PizzaService service = new PizzaServiceImpl();
		
		Pizza pizza = new Pizza(1, "cheese", 500,"jaipur");
		
		//adding the data
		//service.addPizza(pizza);
		
		//fetching the data
		pizza = service.findPizzaByNo(1);
		
//		System.out.println("pizza no: " +pizza.getPizzaNo());
//		System.out.println("pizza type: " +pizza.getPizzaType());
//		System.out.println("pizza price: "+pizza.getPizzaPrice());
//		System.out.println("pizza delivery address: "+pizza.getDeliveryAdd());
//		
		//updating the data
//		pizza.setPizzaType("marghrita");
//		pizza.setPizzaPrice(200);
//		service.updatePizza(pizza);
		
		//deleting the record
		service.deletePizza(pizza);
		System.out.println("end of the program");
	}
}

META-INF ---> persistence.xml
=============================

<?xml version="1.0" encoding="UTF-8"?>

<persistence xmlns="http://java.sun.com/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/persistence
                      http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd"
  version="2.0">
  
	<persistence-unit name="jpaleyerd" transaction-type="RESOURCE_LOCAL">
	
		<provider>org.hibernate.ejb.HibernatePersistence</provider>
		<class>com.pizzamanagement.model.Pizza</class>
		
		<properties>
		<!-- database properties -->
			<property name="javax.persistence.jdbc.url" value="jdbc:postgresql://localhost/ritika" />
			<property name="javax.persistence.jdbc.user" value="postgres" />
			<property name="javax.persistence.jdbc.password" value="ritikaSQL" />
			<property name="javax.persistence.jdbc.driver" value="org.postgresql.Driver" />
			
		<!-- hibernate properties -->
			<property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>
			<property name="hibernate.hbm2ddl.auto" value="update"/><!-- create/update  -->
			<property name="hibernate.show_sql" value="true"/>
		</properties>
		
	</persistence-unit>
	
</persistence>


Output
=======

//adding records
Hibernate: insert into PizzaTable (DeliveryAdd, pizzaPrice, pizzaType, pizzaNo) values (?, ?, ?, ?)

ritika=# select * from pizzatable;
 pizzano | deliveryadd | pizzaprice | pizzatype
---------+-------------+------------+------------
       1 | jaipur      |        500 | cheese
       2 | jaipur      |        200 | margherita
(2 rows)


//fetching the data using pizzaNo.

Hibernate: select pizza0_.pizzaNo as pizzaNo0_0_, pizza0_.DeliveryAdd as Delivery2_0_0_, pizza0_.pizzaPrice as pizzaPrice0_0_, pizza0_.pizzaType as pizzaType0_0_ from PizzaTable pizza0_ where pizza0_.pizzaNo=?
pizza no: 1
pizza type: cheese
pizza price: 500
pizza delivery address: jaipur
end of the program

//updating the data

Hibernate: select pizza0_.pizzaNo as pizzaNo0_0_, pizza0_.DeliveryAdd as Delivery2_0_0_, pizza0_.pizzaPrice as pizzaPrice0_0_, pizza0_.pizzaType as pizzaType0_0_ from PizzaTable pizza0_ where pizza0_.pizzaNo=?
end of the program


ritika=# select * from pizzatable;
 pizzano | deliveryadd | pizzaprice | pizzatype
---------+-------------+------------+-----------
       1 | jaipur      |        200 | marghrita
(1 row)

//delete the pizza data
Hibernate: delete from PizzaTable where pizzaNo=?
end of the program

ritika=# select * from pizzatable;
 pizzano | deliveryadd | pizzaprice | pizzatype
---------+-------------+------------+-----------
(0 rows)
