**************************************************************************com.springjpa package****************************************************************************

EmployeeUi.java
================

package com.springjpa;

import java.util.List;
import java.util.Scanner;

import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

import com.springjpa.config.AppConfig;
import com.springjpa.entity.Employee;
import com.springjpa.service.EmployeeService;
import com.springjpa.service.EmployeeServiceImpl;

public class EmployeeUi {
	static Scanner sc = new Scanner(System.in);
	Employee emp = new Employee();
	public static void main(String[] args) {
		
		ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
		
		EmployeeService service = context.getBean("employeeService",EmployeeServiceImpl.class);
		while (true) {
			System.out.println("\n\n\n\n\nEmployee Crud Operation:");
			System.out.println("1.Create Employee");
			System.out.println("2.Find Employee");
			System.out.println("3.Update Employee");
			System.out.println("4.Delete Employee");
			System.out.println("5.List All Employees");
			System.out.println("6.Exit");
			System.out.println("Enter your choice:");
			int ch = sc.nextInt();
			switch (ch) {
			case 1:
				System.out.println("Enter Employee Name: ");
				String ename = sc.next();
				System.out.println("Enter Employee Salary: ");
				int esal = sc.nextInt();
				System.out.println("Enter Employee City: ");
				String city = sc.next();
				
				Employee emp = new Employee();
				emp.setEname(ename);
				emp.setEsal(esal);
				emp.setCity(city);
				service.addEmployee(emp);
				System.out.println("Employee Inserted");
				break;
			case 2:
				System.out.println("Enter Id to fetch Employee:");
				int eid = sc.nextInt();
				Employee findemp = service.findEmployeeById(eid);
				if (findemp == null) {
					System.out.println("no employees present");
				} else {
					System.out.println("Employee Id:" + findemp.getEid());
					System.out.println("Employee Name:" + findemp.getEname());
					System.out.println("Employee Salary:" + findemp.getEsal());
					System.out.println("Employee City:" + findemp.getCity());}
				break;
			case 3:
				System.out.println("Enter Id to fetch Employee:");
				int id = sc.nextInt();
				System.out.println("Enter the name to update:");
				String updename = sc.next();
				Employee updateemp = service.findEmployeeById(id);
				if (updateemp == null) {
					System.out.println("No employee present");
				} else {
					updateemp.setEname(updename);
					service.updateEmployee(updateemp);
					System.out.println("Employee name Updated");
				}
				break;
			case 4:
				System.out.println("Enter Id to Delete Employee:");
				int did = sc.nextInt();
				service.removeEmployee(did);
				System.out.println("Employee deleted successfully");
				break;
			case 5:
				List<Employee> l1 = service.listEmployee();
				System.out.println("\t Employee Id  \t Employee Name  \t Employee Salary \t City");
				System.out.println("********************************************");
				for (Employee e1 : l1) {
					System.out.println(" \t     " + e1.getEid() + " \t\t "
							+ e1.getEname() + " \t \t  \t    " + e1.getEsal()
							+ " \t \t \t     " + e1.getCity());}
				System.out.println("********************************************");
				break;
			case 6:
				System.out.println("Exited from Employee application");
				sc.close();
				System.exit(1);
			default:
				System.out.println("Wrong choice....\n Please Enter Your Choice Again...");
				break;
			}
		}
	}
}


*********************************************************************com.springjpa.config package*************************************************************************

AppConfig.java
==============

package com.springjpa.config;

import java.util.Properties;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.mchange.v2.c3p0.DriverManagerDataSource;
@Configuration
@EnableTransactionManagement
@ComponentScan(basePackages="com.springjpa")
public class AppConfig {
	@Bean
	public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
		LocalContainerEntityManagerFactoryBean em=new LocalContainerEntityManagerFactoryBean();
		em.setDataSource(oracleDataSource());
		em.setPackagesToScan("com.springjpa.entity");
		JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
		em.setJpaVendorAdapter(vendorAdapter);
		em.setJpaProperties(oracleProperties());
		return em;
	}
	@Bean
	public DataSource oracleDataSource() {
		try {
			DriverManagerDataSource dataSource = new DriverManagerDataSource();
			dataSource.setDriverClass("org.postgresql.Driver");
			dataSource.setJdbcUrl("jdbc:postgresql://localhost:5432/ritika");
			dataSource.setUser("postgres");
			dataSource.setPassword("ritikaSQL");
		
			return dataSource;
		} catch (Throwable e) {
			e.printStackTrace();
			return null;
		}
	}
	Properties oracleProperties() {
		Properties properties = new Properties();
		properties.setProperty("hibernate.dialect","org.hibernate.dialect.PostgreSQLDialect");
		properties.setProperty("hibernate.hbm2ddl.auto", "create");
		properties.setProperty("hibernate.show_sql", "true");
		properties.setProperty("hibernate.format_sql", "true");
		properties.setProperty("spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation", "true");
		return properties;
	}
	@Bean
	public PlatformTransactionManager transactionManager(
			EntityManagerFactory emf) {
		JpaTransactionManager transactionManager = new JpaTransactionManager();
		transactionManager.setEntityManagerFactory(emf);
		return transactionManager;
	}
	@Bean
	public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {
		return new PersistenceExceptionTranslationPostProcessor();
	}

	
}

*********************************************************************com.springjpa.dao package*************************************************************************

EmployeeDao.java Interface
============================

package com.springjpa.dao;


import java.util.List;

import com.springjpa.entity.Employee;

public interface EmployeeDao {

	public abstract Employee getEmployeeById(int eid);

	public abstract void addEmployee(Employee emp);

	public abstract void removeEmployee(int emp);

	public abstract void updateEmployee(Employee emp);

	public abstract List<Employee> listEmployee();

	
	
}


EmployeeDaoImpl.java class
=========================

package com.springjpa.dao;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.springjpa.entity.Employee;

@Repository
@Transactional
public class EmployeeDaoImpl implements EmployeeDao {

	@PersistenceContext  
	private EntityManager entityManager;

	public void setEntityManager(EntityManager entityManager) {
		this.entityManager = entityManager;
	}

	@Override
	public Employee getEmployeeById(int eid) {
		Employee emp = entityManager.find(Employee.class, eid);
		return emp;
	}
	@Override

	public void addEmployee(Employee emp) {
		entityManager.persist(emp);
	}

	@Override

	public void removeEmployee(int emp) {
		Employee emp1=getEmployeeById(emp);
		entityManager.remove(emp1);
	}

	@Override

	public void updateEmployee(Employee emp) {
		entityManager.merge(emp);
	}


	@Override
	public List<Employee> listEmployee() {
		// TODO Auto-generated method stub

		TypedQuery<Employee> q2 = entityManager.createQuery("select c from Employee c", Employee.class);
		List<Employee> l1 = q2.getResultList();
		return l1;
	}

}

*********************************************************************com.springjpa.entity package*************************************************************************

Employee.java
==============

package com.springjpa.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;

@Entity
@Table(name="emp_info")
public class Employee {
	@Id
	@GeneratedValue
	@Column(length=12)
	private int eid; 
	@Column(length=12)
	private String ename;
	@Column(length=12)
	private int esal;
	@Column(length=12)
	private String city;
	public String getEname() {
		return ename;
	}
	public void setEname(String ename) {
		this.ename = ename;
	}
	public int getEsal() {
		return esal;
	}
	public void setEsal(int esal) {
		this.esal = esal;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	
	public int getEid() {
		return eid;
	}
	public void setEid(int eid) {
		this.eid = eid;
	}
	public Employee() {
		// TODO Auto-generated constructor stub
	}
	public Employee(int eid, String ename, int esal, String city) {
		super();
		this.eid = eid;
		this.ename = ename;
		this.esal = esal;
		this.city = city;
	}
	
}

*********************************************************************com.springjpa.service package*************************************************************************

EmployeeService.java Interface
================================

package com.springjpa.service;

import java.util.List;

import com.springjpa.entity.Employee;

public interface EmployeeService {

	public abstract void addEmployee(Employee employee);

	public abstract void updateEmployee(Employee employee);

	public abstract void removeEmployee(int employee);

	public abstract Employee findEmployeeById(int eid);

	public abstract List<Employee> listEmployee();

}


EmployeeServiceImpl.java
========================

package com.springjpa.service;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.springjpa.dao.EmployeeDao;
import com.springjpa.entity.Employee;


@Service("employeeService")
public class EmployeeServiceImpl implements EmployeeService {
	@Autowired
	private EmployeeDao dao;
	@Override
	public void addEmployee(Employee emp) {  
	
		dao.addEmployee(emp);//persist()
	}
	@Override
	public void updateEmployee(Employee emp) {
		dao.updateEmployee(emp);
	}
	@Override
	public void removeEmployee(int emp) {
		dao.removeEmployee(emp);
	}
	@Override
	public Employee findEmployeeById(int eid) {
		// no need of transaction, as it's an read operation
		Employee emp = dao.getEmployeeById(eid);
		return emp;
	}
	@Override
	public List<Employee> listEmployee() {
		// TODO Auto-generated method stub
		List<Employee> l1 = dao.listEmployee();
		return l1;
	}
}


***********************************************************************************OUTPUT***********************************************************************************


Employee Crud Operation:
1.Create Employee
2.Find Employee
3.Update Employee
4.Delete Employee
5.List All Employees
6.Exit
Enter your choice:
1
Enter Employee Name: 

ritika
Enter Employee Salary: 
20000
Enter Employee City: 
jaipur
Hibernate: 
    select
        nextval ('hibernate_sequence')
Hibernate: 
    insert 
    into
        emp_info
        (city, ename, esal, eid) 
    values
        (?, ?, ?, ?)
Employee Inserted





Employee Crud Operation:
1.Create Employee
2.Find Employee
3.Update Employee
4.Delete Employee
5.List All Employees
6.Exit
Enter your choice:
1
Enter Employee Name: 
ram
Enter Employee Salary: 
10000
Enter Employee City: 
sikar
Hibernate: 
    select
        nextval ('hibernate_sequence')
Hibernate: 
    insert 
    into
        emp_info
        (city, ename, esal, eid) 
    values
        (?, ?, ?, ?)
Employee Inserted



Employee Crud Operation:
1.Create Employee
2.Find Employee
3.Update Employee
4.Delete Employee
5.List All Employees
6.Exit
Enter your choice:
2
Enter Id to fetch Employee:
2
Hibernate: 
    select
        employee0_.eid as eid1_0_0_,
        employee0_.city as city2_0_0_,
        employee0_.ename as ename3_0_0_,
        employee0_.esal as esal4_0_0_ 
    from
        emp_info employee0_ 
    where
        employee0_.eid=?
Employee Id:2
Employee Name:ram
Employee Salary:10000
Employee City:sikar



Employee Crud Operation:
1.Create Employee
2.Find Employee
3.Update Employee
4.Delete Employee
5.List All Employees
6.Exit
Enter your choice:
3
Enter Id to fetch Employee:
1
Enter the name to update:
sita
Hibernate: 
    select
        employee0_.eid as eid1_0_0_,
        employee0_.city as city2_0_0_,
        employee0_.ename as ename3_0_0_,
        employee0_.esal as esal4_0_0_ 
    from
        emp_info employee0_ 
    where
        employee0_.eid=?
Hibernate: 
    select
        employee0_.eid as eid1_0_0_,
        employee0_.city as city2_0_0_,
        employee0_.ename as ename3_0_0_,
        employee0_.esal as esal4_0_0_ 
    from
        emp_info employee0_ 
    where
        employee0_.eid=?
Hibernate: 
    update
        emp_info 
    set
        city=?,
        ename=?,
        esal=? 
    where
        eid=?
Employee name Updated



Employee Crud Operation:
1.Create Employee
2.Find Employee
3.Update Employee
4.Delete Employee
5.List All Employees
6.Exit
Enter your choice:
5
Mar 16, 2022 7:22:49 PM org.hibernate.hql.internal.QueryTranslatorFactoryInitiator initiateService
INFO: HHH000397: Using ASTQueryTranslatorFactory
Hibernate: 
    select
        employee0_.eid as eid1_0_,
        employee0_.city as city2_0_,
        employee0_.ename as ename3_0_,
        employee0_.esal as esal4_0_ 
    from
        emp_info employee0_
	 Employee Id  	 Employee Name  	 Employee Salary 	 City
********************************************
 	     2 		 ram 	 	  	    10000 	 	 	     sikar
 	     1 		 sita 	 	  	    20000 	 	 	     jaipur
********************************************



Employee Crud Operation:
1.Create Employee
2.Find Employee
3.Update Employee
4.Delete Employee
5.List All Employees
6.Exit
Enter your choice:
4
Enter Id to Delete Employee:
2
Hibernate: 
    select
        employee0_.eid as eid1_0_0_,
        employee0_.city as city2_0_0_,
        employee0_.ename as ename3_0_0_,
        employee0_.esal as esal4_0_0_ 
    from
        emp_info employee0_ 
    where
        employee0_.eid=?
Hibernate: 
    delete 
    from
        emp_info 
    where
        eid=?
Employee deleted successfully



Employee Crud Operation:
1.Create Employee
2.Find Employee
3.Update Employee
4.Delete Employee
5.List All Employees
6.Exit
Enter your choice:
5
Hibernate: 
    select
        employee0_.eid as eid1_0_,
        employee0_.city as city2_0_,
        employee0_.ename as ename3_0_,
        employee0_.esal as esal4_0_ 
    from
        emp_info employee0_
	 Employee Id  	 Employee Name  	 Employee Salary 	 City
********************************************
 	     1 		 sita 	 	  	    20000 	 	 	     jaipur
********************************************



Employee Crud Operation:
1.Create Employee
2.Find Employee
3.Update Employee
4.Delete Employee
5.List All Employees
6.Exit
Enter your choice:
6
Exited from Employee application
